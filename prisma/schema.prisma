// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//uuid pra autoincrementar
//criar migration -> yarn prisma migrate dev


model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  userType   UserType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Rentals    Rental[]

  @@map("users")
}

model Company {
  id         Int      @id @default(autoincrement())
  name       String
  taxId      String   @unique
  address    String?
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Equipment  Equipment[]

  @@map("companies")
}

model Equipment {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isAvailable Boolean  @default(true)
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Rentals     Rental[]

  @@map("equipments")
}

model Rental {
  id           Int      @id @default(autoincrement())
  userId       Int
  equipmentId  Int
  startDate    DateTime
  endDate      DateTime
  status       RentalStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment    Equipment    @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  Review       Review?

  @@map("rentals")
}

model Review {
  id        Int      @id @default(autoincrement())
  rentalId  Int @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  rental    Rental   @relation(fields: [rentalId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum UserType {
  CLIENT
  ADMIN
}

enum RentalStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}